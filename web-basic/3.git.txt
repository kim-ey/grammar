- Git은 소프트웨어를 개발하는 기업의 핵심 자산인 소스코드를 효과적으로 관리할 수 있게 해주는 무료, 공개소프트웨어.

- Git : 버전 관리 시스템
    - 프로젝트를 진행하면서 소스 코드를 USB나 메일로 주고받는 건 엄청난 낭비 임과 동시에 보안성 위험이 있다.
    그렇기 때문에 프로젝트를 진행 함에 있어 형상 관리 도구를 사용 한다. 
    - 형상 관리 도구를 사용하면 변경을 쉽게 되돌릴 수 있다. 소스코드를 과거의 특정 시점으로 되돌리거나, 특정 시점의 변경 사항을 취소하거나, 두 버전의 소스 코드를 비교하는 등의 일이 가능하다.

- Github : 버전 관리 웹호스팅 서비스
    - 협업하고 있는 코드를 저장할 서버가 필요하다.
    - 버전 관리 시스템을 지원하는 웹호스팅 서비스의 기능을 통해, push, pull request같은 이벤트에 반응하여 자동으로 작업(배포 등)을 실행하게 할 수 있다.

- 설치 방법 : 
1. vscode에서 Terminal -> 새로운 터미널 열기 -> brew install mac 검색 후 sudo 명령어로 brew 설치
2. brew install git

- 코드와 깃을 연동
1. github.com에 들어간다. -> sign in -> new repo -> git 주소를 복사 https://github.com/kim-ey/i-portfolio.git
2. 터미널에서 ls, cd grammar 명령어등을 사용해서 해당 소스코드 폴더로 이
3. 소스를 깃 레포지토리에 업로드
git init (소스 안에 git 명령어를 사용할 수 있게 설치)
git remote add origin https://github.com/kim-ey/grammar.git (소스와 깃 연동)
git add . (스테이징 환경에 모든 소스코드를 올린다.)
git commit -m "first commit" (커밋 = 스테이징에 있는 코드들을 커밋명을 붙여서 푸시 전단계로 올린다.)
git push -u origin master (업로드)
4. 최초의 경우, git 유저 정보 터미널에 입력
    git config --global user.email "you@example.com"
    git config --global user.name "Your Name"

5. 반복할 것은 이것 뿐!
    소스를 업데이트한다.
    git add . (스테이징 환경에 모든 소스코드를 올린다.)
    git commit -m "first commit" (커밋 = 스테이징에 있는 코드들을 커밋명을 붙여서 푸시 전단계로 올린다.)
    git push -u origin master (업로드)

- 관련 용어들
    - Repository : 깃 저장소
    - Staging Area : 저장소에 커밋하기 전에 커밋을 준비하는 위치.
    - Commit : 현재 변경된 작업 상태를 점검을 마치면 확정하고 저장소에 저장하는 작업.
    - Branch : 가지 또는 분기점을 의미하며, 작업을 할때에 현재 상태를 복사하여 Branch에서 작업을 한 후에 완전하다 싶을때 Merge를 하여 작업을 한다.
    - Merge : 다른 Branch의 내용을 현재 Branch로 가져와 합치는 작업을 의미한다.